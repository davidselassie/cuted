#!/usr/bin/env ruby

# David Selassie
# April 28, 2011

# USAGE: cuted start | stop | run [-- ...]
# A simple process queue daemon. Add processes using the cute command.

# Requires a daemonizer!
require 'daemons'
# Also requires this simple config parser.
require 'parseconfig'
require 'logger'
require 'drb'

require 'cuted/queue'

Daemons.run_proc('cuted', :dir => '~', :log_output => true) do
  logger = Logger.new(STDOUT)

  # Set up defaults that might be overwritten.
  config = {'max_concurrent' => 4, 'log' => 'cute.log',
    'uri' => 'drbunix:///tmp/cuted.sock'}
  # See if there's any user settings in ~/.cuterc and write them on top.
  if File.exists?(File.expand_path('~/.cuterc'))
    config.merge!(ParseConfig.new(File.expand_path('~/.cuterc')).params)
    # If the log variable is there but blank, make it nil.
    if config['log'] and config['log'].strip.length == 0 then
      config['log'] = nil
    end
  end

  # Use the environment variable PROWLKEY if it's there.
  config['prowl_key'] = ENV['PROWLKEY'] if ENV['PROWLKEY']

  logger.info "Will run #{config['max_concurrent']} processes concurrently"
  logger.info 'Will log command outputs' if config['log']
  if config['prowl_key'] then
    logger.info "Will notify Prowl key #{config['prowl_key']} of completions"
  end

  begin
    queue = Cuted::Queue.new(:logger => logger,
                            :max_concurrent => config['max_concurrent'],
                            :defaults => {:prowl_key => config['prowl_key'],
                              :log => config['log']})
    DRb.start_service(config['uri'], queue)

    logger.info "Running on #{DRb.uri}"
    ENV['cuted_uri'] = DRb.uri

    # Wait. Let clients call methods on the queue.
    DRb.thread.join
  rescue Interrupt
    logger.info 'Exiting'
  end
end
